name: build

on:
  pull_request:
    paths:
      - .github/workflows/build.yaml
      - Dockerfile
      - go.*
      - api/**
      - cmd/**
      - internal/**
      - e2e_test/**
      - '!**/*_test.go'
      - '!**/*.md'
  push:
    branches:
      - main
    tags:
      - v*
    paths:
      - .github/workflows/build.yaml
      - Dockerfile
      - go.*
      - cmd/**
      - api/**
      - internal/**
      - e2e_test/**
      - '!**/*_test.go'
      - '!**/*.md'

jobs:
  container:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    outputs:
      image-uri: ${{ steps.build-metadata.outputs.image-uri }}
    steps:
      - uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
      - uses: int128/docker-build-cache-config-action@fb186e80c08f14a2e56ed9105d4594562bff013f # v1.40.0
        id: cache
        with:
          image: ghcr.io/${{ github.repository }}/cache
      - uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: build
        with:
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: ${{ steps.cache.outputs.cache-from }}
          cache-to: ${{ steps.cache.outputs.cache-to }}
          platforms: |
            linux/amd64
            linux/arm64
      - uses: int128/docker-build-metadata-action@f38781ddbaa410e9f8fa55a291dce7480798f1a0 # v1.2.0
        id: build-metadata
        with:
          metadata: ${{ steps.build.outputs.metadata }}

  manifest:
    needs: container
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - run: kustomize edit set image controller="$controller_image"
        working-directory: config/manager
        env:
          controller_image: ${{ needs.container.outputs.image-uri }}
      - run: kustomize build config/default > "${RUNNER_TEMP}/${GITHUB_REPOSITORY##*/}.yaml"
      - run: cat "${RUNNER_TEMP}/${GITHUB_REPOSITORY##*/}.yaml"
      - if: github.ref_type == 'tag'
        run: gh release upload "$GITHUB_REF_NAME" "${RUNNER_TEMP}/${GITHUB_REPOSITORY##*/}.yaml" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: aquaproj/aqua-installer@ea518c135a02fc11ff8024364510c181a5c6b342 # v4.0.3
        with:
          aqua_version: v2.55.0
          working_directory: e2e_test
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum

      # Set up the test environment
      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: e2e-test-token
        with:
          app-id: ${{ secrets.E2E_SETUP_GITHUB_APP_ID }}
          private-key: ${{ secrets.E2E_SETUP_GITHUB_APP_PRIVATE_KEY }}
          repositories: argocd-commenter-e2e-test
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ steps.e2e-test-token.outputs.token }}
          repository: int128/argocd-commenter-e2e-test
          path: e2e_test/argocd-commenter-e2e-test-repository
      - run: make -C e2e_test setup-fixture-branch

      - run: make -C e2e_test cluster
      - run: make -C e2e_test deploy-argocd

      # Download the modules during cluster setup.
      - run: go mod download

      - uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
          # Retrieve single tag
          flavor: latest=false
      - uses: int128/wait-for-docker-image-action@4975bd239c55b16ec86bbcca9cab53ac056f8e07 # v1.8.0
        with:
          tags: ${{ steps.metadata.outputs.tags }}

      - run: make -C e2e_test deploy-controller
        env:
          CONTROLLER_IMAGE: ${{ steps.metadata.outputs.tags }}
          GITHUB_APP_ID: ${{ secrets.E2E_GITHUB_APP_ID }}
          GITHUB_APP_INSTALLATION_ID: ${{ secrets.E2E_GITHUB_APP_INSTALLATION_ID }}
          GITHUB_APP_PRIVATE_KEY: ${{ secrets.E2E_GITHUB_APP_PRIVATE_KEY }}

      - run: make -C e2e_test wait-for-apps

      # Run the test
      - uses: int128/deployment-action@e85e5b7a16e8e5376c14783535f1f93e67cfb0bd # v1.50.0
        id: deployment-app1
        with:
          environment-suffix: /app1
      - uses: int128/deployment-action@e85e5b7a16e8e5376c14783535f1f93e67cfb0bd # v1.50.0
        id: deployment-app2
        with:
          environment-suffix: /app2
      - uses: int128/deployment-action@e85e5b7a16e8e5376c14783535f1f93e67cfb0bd # v1.50.0
        id: deployment-app3
        with:
          environment-suffix: /app3

      - run: make -C e2e_test deploy-app1
        env:
          DEPLOYMENT_URL: ${{ steps.deployment-app1.outputs.url }}
          GITHUB_TOKEN: ${{ steps.e2e-test-token.outputs.token }}

      - run: make -C e2e_test restart-app1

      - run: make -C e2e_test deploy-app2
        env:
          DEPLOYMENT_URL: ${{ steps.deployment-app2.outputs.url }}
          GITHUB_TOKEN: ${{ steps.e2e-test-token.outputs.token }}

      - run: make -C e2e_test deploy-app3
        env:
          DEPLOYMENT_URL: ${{ steps.deployment-app3.outputs.url }}
          GITHUB_TOKEN: ${{ steps.e2e-test-token.outputs.token }}

      # Show logs
      - run: make -C e2e_test logs-controller
        if: always()
      - run: make -C e2e_test logs-argocd-application-controller
        if: always()
      - run: make -C e2e_test logs-argocd-applicationset-controller
        if: always()
      - run: make -C e2e_test logs-argocd-repo-server
        if: always()
