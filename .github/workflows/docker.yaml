name: docker

on:
  push:
    branches:
      - master
    paths:
      - .github/workflows/docker.yaml
      - Dockerfile
      - go.*
      - main.go
      - api/**
      - controllers/**
      - pkg/**
      - e2e_test/**
      - '!**/*_test.go'
    tags:
      - v*
  pull_request:
    branches:
      - master
    paths:
      - .github/workflows/docker.yaml
      - Dockerfile
      - go.*
      - main.go
      - api/**
      - controllers/**
      - pkg/**
      - e2e_test/**
      - '!**/*_test.go'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: docker/metadata-action@v4
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
      - uses: int128/docker-build-cache-config-action@v1
        id: cache
        with:
          image: ghcr.io/${{ github.repository }}/cache
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v2
      - uses: docker/build-push-action@v3
        id: build
        with:
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: ${{ steps.cache.outputs.cache-from }}
          cache-to: ${{ steps.cache.outputs.cache-to }}

  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      # set up the test environment
      - uses: cybozu/octoken-action@v1
        id: octoken
        with:
          github_app_id: ${{ secrets.E2E_SETUP_GITHUB_APP_ID }}
          github_app_private_key: ${{ secrets.E2E_SETUP_GITHUB_APP_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        with:
          token: ${{ steps.octoken.outputs.token }}
          repository: int128/argocd-commenter-e2e-test
          path: e2e_test/argocd-commenter-e2e-test-repository
      - run: make -C e2e_test setup-fixture-branch

      - run: make -C e2e_test cluster
      - run: make -C e2e_test deploy-argocd

      - uses: docker/metadata-action@v4
        id: metadata
        with:
          images: ghcr.io/${{ github.repository }}
      - uses: int128/wait-for-docker-image-action@v1
        with:
          tags: ${{ steps.metadata.outputs.tags }}

      - run: make -C e2e_test deploy-controller
        env:
          CONTROLLER_IMAGE: ${{ steps.metadata.outputs.tags }}
          GITHUB_APP_ID: ${{ secrets.E2E_GITHUB_APP_ID }}
          GITHUB_APP_INSTALLATION_ID: ${{ secrets.E2E_GITHUB_APP_INSTALLATION_ID }}
          GITHUB_APP_PRIVATE_KEY: ${{ secrets.E2E_GITHUB_APP_PRIVATE_KEY }}

      - run: make -C e2e_test wait-for-sync

      # test
      - uses: int128/deployment-action@v1
        id: deployment-app1
        with:
          environment-suffix: /app1
      - run: make -C e2e_test deploy-app1
        env:
          PULL_REQUEST_BODY: "e2e-test ${{ github.repository }}#${{ github.event.pull_request.number }}"
          DEPLOYMENT_URL: ${{ steps.deployment-app1.outputs.url }}
          GITHUB_TOKEN: ${{ steps.octoken.outputs.token }}

      - run: make -C e2e_test restart-app1

      - uses: int128/deployment-action@v1
        id: deployment-app2
        with:
          environment-suffix: /app2
      - run: make -C e2e_test deploy-app2
        env:
          PULL_REQUEST_BODY: "e2e-test ${{ github.repository }}#${{ github.event.pull_request.number }}"
          DEPLOYMENT_URL: ${{ steps.deployment-app2.outputs.url }}
          GITHUB_TOKEN: ${{ steps.octoken.outputs.token }}

      - uses: int128/deployment-action@v1
        id: deployment-app3
        with:
          environment-suffix: /app3
      - run: make -C e2e_test deploy-app3
        env:
          PULL_REQUEST_BODY: "e2e-test ${{ github.repository }}#${{ github.event.pull_request.number }}"
          DEPLOYMENT_URL: ${{ steps.deployment-app2.outputs.url }}
          GITHUB_TOKEN: ${{ steps.octoken.outputs.token }}

      # show logs
      - run: make -C e2e_test logs-argocd
        if: always()
      - run: make -C e2e_test logs-controller
        if: always()
